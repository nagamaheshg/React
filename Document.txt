#### Folder structure

- node_modules
  Contain all dependencies required by the app. Main Dependencies also listed in packet.json

- Public

    Contains static assets including index.html(page template).
    -index.html
        - title
        - fonts
        - css
        - favicon
        - id = "root" - our entire app

    - src

        In simplest form it's brain of our app. 
        This is where we will do all of our work.
        src/index.js is the javascript entry point.

    - .gitignore

        specifies which files source control (Git) should ignore 
    
    - Package.json

        Every Node.js Project has a package.json and it contains info about our project, 
        for example list of Dependencies and scripts

- Package.json

    Every Node.js project has project.json and it contain info about our project, for example
    list of dependencies and scripts.

 - Package-lock.json
    
    A snap shot of entire dependency tree

  - README

    The markdown file where you can share more info about the project for example build instructions
    and summary.

#### Remove Boilerplate

 - remove src Folder
 - create src Folder
 - create index.js inside src
 - toggle sidebar CMD + B
 - Shortcuts and settings/keyboard shortcuts

 #### FirstComponent

 ```js
 function Greetings = () => {
    return <h2>My First Component</h2>
 }

 // arrow function also works

 const Greetings = () => {
    return <h2> MyFirst component </h2>
 }

```
 - Start with capital letter
 - Must return JSX (html)
 - always close tag <Greetings />

#### Typical Components

 ```js
 // imports or logic

const Greetings = () => {
    return <h2> MyFirst component </h2>
 }

export default Greetings;
```

##### Root Component

index.js
```js
import React from 'react'
import ReactDOM from 'react-dom/client'

function Greetings = () => {
    return <h2>My First Component</h2>
 }

 const root = ReactDOM.createRoot(document.getElementById('root'));

 root.render(<Greetings/>);


 ```
 - createRoot is special method it always looking for 'root'
 - when we create a component need to render the component 

#### Extension and setting.json

- Auto Rename Tag
- Highlight Matching Tag
- customize in settings.json
- Prettier
- Format on save
- Format on paste
- Default Formatter (prettier - code formatter)

settings.json

```json

"editor.formatOnPaste":true,
"editor.formatOnSave":true,
"editor.defaultFormatter":"esbenp.prettier-vscode",
"prettier.singleQuote":true,
"prettier.semi": false,

```
- Emmet

settings.json
```json
"emmet.includeLanguages": {
    "javascript": "javascriptreact"
},

```
- ES7 Snippets

    - rafce (arrow func with export)
    - rfce (regular func with export)
    - same as the file name
    - react auto import
        - uncheck
        - React Snippets > Settings: Import React On Top

#### First Component In Detail

- Capital letter
- must return something
- JSX syntax (return html)
- to make our life easier
- calling function under the hood

index.js
```js

const Greetings = () => {
    return React.createElement('h2', {}, 'hello world');
};

```
index.js
```js
const Greetings = () => {
    return 
    <div>
        <h2> Hello World! </h2>
    </div>
}

const Greetings = () => {
    return React.createElement(
        'div', 
        {},
        React.createElement('h2', {}, 'Hello World!')
    );
};

#### JSX Rules

- return single element

    - semantics section/article
    - Fragment - let's us group elements without adding extra nodes.

```js
return <React.Fragment>...rest of the return</React.Fragment>

// shorthand

return <>...rest of the return </>

- camelCase property naming conventions
    
```js
<div tabIndex={1}>
    <button onClick={myFunction}>Click ME </button>
    <label htmlFor='name'>Name</label>
    <input readOnly={true} id='name'/>
</div>

//in html
<div tabIndex={1}>
    <button onClick="myFunction()">Click ME </button>
    <label for='name'>Name</label>
    <input readOnly id='name'/>
</div>
```
- className instead of class

```js

return <div className='someValue'> Hello </div>;

```
- close every element

```js
return <img />;
or
return <input />;
```

#### Nest Components
```js
function Greetings(){

    return(
        <div>
            <Person/>
            <Message/>
        </div>
    )
}

const Person = () => <h2> John Doe </h2>
const Message = () => <p> This is my Message </p>

#### React Developer Tools
- top right corner
- more tools/extensions
- open chrome web store
```js
import React from 'react';
import ReactDOM from 'react-dom/client';

const BookList = () => {
	return (
		<section>
			<Book />
			<Book />
		</section>
	);
};

const Book = () => {
	return (
		<article>
			<Image />
			<Title />
			<Author />
		</article>
	);
};

const Image = () => <h2> Image Place Holder</h2>;
const Title = () => <h2> Book Title </h2>;
const Author = () => {
	return <h4>Book Author</h4>;
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```
- in search engine type - 'amazon best selling book'
    [Amazon Best Sellers](https://www.amazon.com/Best-Sellers-Books/zgbs/books)
- Don't need to buy anything
- Not an Affiliate link
- Choose a book
- copy image, title and author

```js
import React from 'react';
import ReactDOM from 'react-dom/client';

const BookList = () => {
	return (
		<section>
			<Book />
			<Book />
		</section>
	);
};

const Book = () => {
	return (
		<article>
			<Image />
			<Title />
			<Author />
		</article>
	);
};
const Image = () => <img src='https://m.media-amazon.com/images/I/718SstStV3L._AC_UY218_.jpg' alt='Curious Minds' />;
const Title = () => <h2>Interesting Facts For Curious Minds</h2>;
const Author = () => {
	return <h4>Jordan Moore</h4>;
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```
#### css

- create index.css in src

```css
*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    background: #f1f5f8;
    color: #222;
}

```
- import file and add classes

```js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'

const BookList = () => {
	return (
		<section className='booklist'>
			<Book />
			<Book />
		</section>
	);
};

const Book = () => {
	return (
		<article className='book'>
			<Image />
			<Title />
			<Author />
		</article>
	);
};
const Image = () => <img src='https://m.media-amazon.com/images/I/718SstStV3L._AC_UY218_.jpg' alt='Curious Minds' />;
const Title = () => <h2>Interesting Facts For Curious Minds</h2>;
const Author = () => {
	return <h4>Jordan Moore</h4>;
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);

```
- complete css

```css

.booklist {
    width: 90vw;
    max-width: 1170px;
    margin:5rem auto;
    display: grid;
    gap: 2rem
}

@media screen and (min-width: 768px){
.booklist{
    grid-template-columns: repeat(3, 1fr)
    }
}

.book{
    background: #fff;
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;

}
.book img{
    width: 100%;
    object-fit: cover;
}

.book h2{
    margin-top: 1rem;
    font-size: 1rem;
}
```
#### Local Images (public folder)

 - Optional Video !!!
 - external images (hosted on different server) - just need an url
 - local images (public folder) - less performant
 - local images (src folder) - better solution for assets,
   since under the hood they get optimized.
 - Save image (Save Image As...)
 - Create images folder in public
 - copy/paste image
 - rename(optional)
 - replace url in src - './images/imageName.extensions'
 - './'because assets are on the same server

```js

const Image = () => (
    <img src='./images/book-1.jpg' alt='Interesting Facts For Curious Minds' />

);
```
- whatever assets we place in public - instantly available.
- domain(localhost/assets)

#### JSX - CSS (inline-css)

- Style prop
- {} in JSX means going back to JS Land
- value is an object with key/value pairs - capitalized and with ''

```js
const Author = () => (
    <h4 style={{color: '#617d98', fontSize: '0.75', marginTop: '0.5rem' }}> Jordan Moore</h4>

);
```
- css rules still apply (inline vs external css)

```css

.book h4{
    /* won't work */
    color: red;
    /* will work */
    letter-spacing: 2px;
}

```js
- external libraries use inline css,
  so, if you want to make some changes,
  reference the library docs and elements tab

- alternative option

```js

const Author = () => {
    const inlineHeadingStyles = {
        color: '#617d98',
        fontSize: '0.75rem',
        marginTop: '0.75rem',
    };
    return <h4 style={inlineHeadingStyles}> Jordan Moore</h4>;
};

- For The Most Part, Multiple Approaches available !!!
- As LONG As THE RESULT is the same, Really comes down to performance !!!

#### JSX - Javascript

- Refactor to single book component (personal preference)
- remove inline css

```js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';

const BookList = () => {
	return (
		<section className='booklist'>
			<Book />
			<Book />
		</section>
	);
};

const Book = () => {
	return (
		<article className='book'>
			<img src='./images/book1.jpg' alt='Interesting Facts For Curious Minds' />;
            <h2>Interesting Facts For Curious Minds</h2>;
            <h4> Jordan Moore</h4>;
		</article>
	);
};


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```
```css
.book h4{
    /* will work */
    letter-spacing: 2px;
    color: #617d98;
    margin-top: 0.5rem;
    font-size: 0.5rem;
}
```
- {} in JSX means going back JS Land
- Value inside must be an expression (return value),
  can't be a statement.

```js

const author = 'Jordan Moore';
const Book = () => {
    const title = 'Interesting Facts for curious Mindssss';

    return(
        <article className='book'>
            <img src='./images/book-1.jpg'
                alt='Interesting Facts for curious Mindssss'
            />
            <h2>{title}</h2>
            <h4>{author.toUpperCase()}</h4>
            {/* <p>{let x = 6}</p>*/}
            <p> {6+6} </p>
            </article>
    );
};
```
#### Props - Initial Setup

- refactor /cleanup

```js

const author = 'Jordan Moore';
const title = 'Interesting Facts For Curious Mins';
const img = './images/book1.jpg';

function BookList(){
    return(
        <section className='booklist'>
            <Book />
            <Book />
        </section>
    );
}

const Book = () =>{
    return (
        <article className='book'>
            <img src={img} alt={title} />
            <h2>{title}</h2>
            <h4>{author}</h4>
    );
};

```js
// parameters

const someFunc = (param1, param2) => {
    console.log(param1, param2);
}

// arguments
someFunc('job', 'Developer');
```
```js
const Book = (props) => {
    console.log(props);
    return (
        <article className='book'>
            <img src={img} alt={title} />
            <h2>{title}</h2>
            <h4>{author}</h4>
    );

}
```
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';

const author = 'Jordan Moore';
const title = 'Interesting Facts For Curious Mins';
const img = './images/book1.jpg';

function BookList() {
	return (
		<section className='booklist'>
			<Book author={author} title={title} img={img} />
			<Book author={author} title={title} img={img} /> 
		</section>
	);
}

const Book = (props) => {
     
	return (
		<article className='book'>
			<img src={props.img} alt={props.title} />
			<h2>{props.title}</h2>
			<h4>{props.author}</h4>
           
		</article>
	);
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```
#### props - Somewhat Dynamic Setup

- setup an object
- refactor vars to properties
- copy/paste and rename
- get value for second book
- setup props

```js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';

const firstBook = {
        author:'Jordan Moore',
        title: 'Interesting Facts For Curious Minds',
        img: './images/book1.jpg',
    };
const secondBook = {
        author:'James Clear',
        title: 'Atomic Habits',
        img: './images/book2.jpg',
    };

function BookList() {
	return (
		<section className='booklist'>
			<Book author={firstBook.author} title={firstBook.title} img={firstBook.img} />
			<Book author={secondBook.author} title={secondBook.title} img={secondBook.img} /> 
		</section>
	);
}

const Book = (props) => {
     
	return (
		<article className='book'>
			<img src={props.img} alt={props.title} />
			<h2>{props.title}</h2>
			<h4>{props.author}</h4>
           
		</article>
	);
};


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);

#### Access Props - Multiple Approaches
- there is no right or wrong - again preference !!!

- Destructing (object)
- destructuring in Vanilla JS
- Pull out the properties
- don't need to reference object anymore

```js
const bob = {
    first: 'bob',
    last: 'sanders',
    city: 'chicago',
    siblings: {
        sister: 'jane',
    },
};

const firstName =  bob.first;
const lastName = bob.last;
const sister = bob.siblings.sister;

console.log(firstName, lastName, sister); bob sanders james

(or)

// object destructuring

const {first, last, city} = bob   #bob, sanders chicago

we can also provide alias name to 

const {first:firstName, last, city} = bob
console.log(first, last, city)     # first is not defined.

console.log(firstName, last, city) # bob sanders chicago

const {first, last, city, siblings:{sister}}
console.log(first, last, city, sister); bob sanders chicago jane

function printPerson(person){
    console.log(person.first)
}

printPerson(bob)

or

function printPerson(person){
    const {first, last} = person;
    
}
console.log(first); bob

or

function printPerson({first, last, city, siblings:{sister}}){
    console.log(first, last, city, sister); bob sanders jane
}
```js
const someObject = {

    name: 'john',
    job: 'developer',
    location: 'florida',
};

console.log(someObject.name)

const {name, job} = someObject;
console.log(job);
```
- no need for all the props.propName
- destructure inside component

```js
const Book = (props) => {
    const {img, title, author} = props;
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2>{title}</h2>
            <h4>{author}</h4>
        </article>
    );
};
```
- destructure in function parameters (in our case props)
- if have console.log(props) -  it won't defined

```js
const Book = ({img, title, author}) => {
    return(
        <article className='book'>
            <img src={img} alt={title} />
            <h2>{title}</h2>
            <h4>{author}</h4>
        </article>
    );
};
```

####Children prop

- everything we render between component tags
- during the course we will mostly use it context API
- special prop, has to be 'Children'
- can place anymore in JSX

```js
function BookList(){
    return(
        <section className="booklist">
            <Book
                author = {firstBook.author}
                title = {firstBook.title}
                img = {firstBook.author}
                <p> Lorem, ipsum </p>
                <button> click me </button>
            />
            
    )
}

const Book = (props) => {
    const {img, title, author, children} = props;
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2>{title}</h2>
            <h4>{author}</h4>
            {children}
        </article>
    );
};

#### Simple List

```js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';

const books = [
	{
		author: 'Jordan Moore',
		title: 'Interesting Facts For Curious Minds',
		img: './images/book1.jpg',
        id: 1
	},
	{
		author: 'James Clear',
		title: 'Atomic Habits',
		img: './images/book2.png',
        id: 2
	},
];


function BookList() {
	return (
		<section className='booklist'>
			{books.map((book)=>(
                <Book key={book.id} img={book.img} title={book.title} author={book.author}/>
            ))}
		</section>
	);
}

const Book = ({ img, title, author }) => {
	return (
		<article className='book'>
			<img src={img} alt={title} />
			<h2>{title}</h2>
			<h4>{author}</h4>
		</article>
	);
};
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```
#### Key Prop
- typically it's going to be id

```js
const books = [
	{
		author: 'Jordan Moore',
		title: 'Interesting Facts For Curious Minds',
		img: './images/book1.jpg',
        id: 1
	},
	{
		author: 'James Clear',
		title: 'Atomic Habits',
		img: './images/book2.png',
        id: 2
	},
];

```
- you will see index, but it's not advised if the list is changing

```js
function BookList() {
    return(
        <section className='booklist'>
            {books.map((book,index)=>{
                console.log(book)
                const {img, title, author, id}= book;
                return <Book book={book} key={index} />;
            })}
    );
};
```
#### pass the entire object

- render component
- pass entire object
- destructuring (object)
 
 ```js
 function BookList() {
    return(
        <section className='booklist'>
            {books.map((book)=>{
                console.log(book)
                const {img, title, author, id}= book;
                return <Book book={book}  />;
            })}
    );
};
```
alternative
```js
const Book = ({book:{img, title, author}}) =>{

    return(
        <article className='book'>
            <img src={img} alt={title} />
            <h2> {title} </h2>
            <h4>{author}</h4>
        </article>
    );
};

#### My Personal preference

- utilize spread operator (...) - copy values
- spread operator

```js

const friends = ['john', 'peter', 'anna'];
const newFriends = [...friends, 'susan']
console.log(friends)
console.log(newFriends)
const someObject = {
    name: 'john',
    job: 'developer',
};

// copy not a reference !!!
const newObject = {...someObject, location: 'florida'};
console.log(someObject);
console.log(newObject);
```
#### Events - Fundamentals

- Vanilla JS

```js

const btn = document.getElementById('btn')

btn.addEventListener('click', function(e){
    //access event object
    // do something when event fires
})

```
- similar approach
- element, event, function
- again camelCase

```js
const EventExample = () => {
    const handleButtonClick = () => {
        alert('handle button click');
    };
    return(
        <section>
            <button onClick={handleButtonClick}>click me</button>
        </section>

    );
};
```
- [React Event] (https://reactjs.org/docs/event.html)
- no need to memorize them
- most common
- onClick (click event)
- onSubmit(submit form)
- onChange (input change)

```js
function BookList(){
    return (
		<section className='booklist'>
			{books.map((book)=>(
                <Book {...book} key={book.id}/>
            ))}
		</section>
	);
}

const EventExample = () => {
    const handleFormInput = () => {
        console.log('Handle form input');

    };
    const handleButtonClick = () => {
        alert('handle button click');
    };
    return(
        <section>
            <form>
                <h2>Typical Form</h2>
                <input type='text'
                name='example'
                onChange={handleFormInput}
                style={{margin: '1rem 0'}}
                />
            </form>
        <button onClick={handleButtonClick}> Click Me</button>
        </section>

    );
};


#### Event Object and Form Submission

```js
const EventExample = () => {
    
    const handleFormInput = (e) => {
        console.log(e);
        //e.target - element
        console.log(`Input Name: ${e.target.name}`);
        console.log(`input value: ${e.target.value}`);
        // console.log('handle form input')

    }
    const handleButtonClick = () => {
        alert('handle button click');
    }
    const handleFormSubmission = (e) => {
        e.preventDefault();
        console.log('form submitted');
    };
    return(
        <section>
            {/*add onSubmit Event Handler */}
            <form onSubmit={handleFormSubmission}>
                <h2>Typical Form</h2>
                <input type='text'
                name='product'
                onChange={handleFormInput}
                style={{margin: '1rem 0'}}
                />
                <button onClick={handleButtonClick} type="button">click me </button>
                <button type='submit'> submit </button>
            </form>
        </section>
    )
}
```
#### Mind Grenade

- alternative approach
- pass anonymous function (in this case arrow function)
- one liner - less code

```js
const EventExample = () => {
    return(
        <section>
            <button onClick={()=>console.log('hello there')}>click me</button>
        </section>
    );
};
```

- similar approach
- element, event, function,
- again camelCase

```
const EventExample = () => {
    return(
        <section>
            <form>
                <h2> Typical Form </h2>
                <input
                    type="text"
                    name="product"
                    onChange={(e)=>console.log(e.target.value)}
                    style={{margin:'1rem 0'}}
                />
                <button type='submit'> submit </button>
                <div>
                    <button onClick={() => console.log('click me')} type='button'>
                    click me
                    </button>
                </div>
            </form>
        </section>
    );
};

#### Mind Grenade2

- remove EventExample
- components are independent by default

```js
function BookList = () => {

    return(
        <section className='booklist'>
            {books.map((book)=>{
                return <book {...book} key={book.id} />;

            })}
        <section/>

    );
};

const Book = (props) => {
    const {img, title, author} = props;
    const displayTitle = () => {
        console.log(title);
    }
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2>{title}</h2>
            <button onClick={displayTitle}>Display Title</button>
            <h4>{author}</h4>
        </article>
    )
}
```
- remove button

#### Prop Drilling

- react data flow - can only pass props down
- alternative context API, redux, other state libraries

```js
function BookList(){
    const someValue = 'shakeAndBake'
    const displayValue = () => {
        console.log(someValue);
    };
    return(
        <section className='booklist'>
            {books.maps((book)=>{
                return <Book {...book} key={book.id} displayValue={displayValue} />;
            })}
    )
}
const Book = (props) => {
    const {img, title, author, displayValue} = props;
    const displayTitle = () => {
        console.log(title);
    }
    return (
        <article className='book'>
            <img src={img} alt={title}/>
            <h2>{title}</h2>
            <button onClick={displayValue}>Display Title</button>
            <h4>{author}</h4>
        </article>
    )
}
```
// Filter - return a new array, can manipulate the size of new array (unlike map), returns based on condition
// Find - returns single instance (object ), return the first match if no match - undefined

const people = [
    { name: 'bob', age:20, position: 'developer'},
    { name: 'peter', age:25, position: 'designer'},
    { name: 'susy', age:25, position: 'the boss'},
    { name: 'anna', age:35, position: 'intern'},

]
const fruits = ['orange', 'pear', 'lemon'];
// filter

const young = people.filter((person)=> person.age < 30);
const developers = people.filter((person)=>person.position === 'developer');

// no match
const seniorDevs = people.filter((person) => person.position === 'Senior Dev')

// find
const peter = people.find((person)=>person.name === 'peter')
console.log(peter)

// no match
const oldPerson = people.find((person)=>person.age>35); //undefined

// Multiple matches - first match
const randomPerson = people.find((person) => person.age < 35)
#### More Complex Example

- initial setup
- create getBook Function in booklist
- accepts id as argument and find the book
- pass the function down to Book Component and invoke on the button click
- in the Book Component destructure id and function
- invoke the function when user click the button, pass the id
- the goal : You should see the same book in the console.

```js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';

const books = [
	{
		author: 'Jordan Moore',
		title: 'Interesting Facts For Curious Minds',
		img: './images/book1.jpg',
        id: 1
	},
	{
		author: 'James Clear',
		title: 'Atomic Habits',
		img: './images/book2.png',
        id: 2
	},
];


function BookList() {

    const getBook = (id) => {
        const book = books.find((book)=> book.id == id);
        console.log(book)
    }
	return (
		<section className='booklist'>
			{books.map((book)=>(
                <Book {...book} key={book.id} getBook={getBook}/>
            ))}
		</section>
	);
}

const Book = (props) => {
    const {img, title, author, getBook, id} = props
	return (
		<article className='book'>
			<img src={img} alt={title} />
			<h2>{title}</h2>
			<h4>{author}</h4>
            <button onClick={()=>getBook(id)}>Click</button>
		</article>

	);
};
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```

#### Import and Export Statements

- remove all getBook code

- setup two files in src book.js and Book.js
- cut book array from index.js
- add to book.js

book.js

```js


const books = [
	{
		author: 'Jordan Moore',
		title: 'Interesting Facts For Curious Minds',
		img: './images/book1.jpg',
        id: 1
	},
	{
		author: 'James Clear',
		title: 'Atomic Habits',
		img: './images/book2.png',
        id: 2
	},
];

export default books

```
```js

const Book = (props) => {
	const { img, title, author } = props;
	return (
		<article className='book'>
			<img src={img} alt={title} />
			<h2>{title}</h2>
			<h4>{author}</h4>
		</article>
	);
};

export default Book
```
```js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import Books from './books';
import Book from './Book';
function BookList() {
	return (
		<section className='booklist'>
			{Books.map((book) => (
				<Book {...book} key={book.id} />
			))}
		</section>
	);
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<BookList />);
```
#### Local Images (src folder)

- better performance because optimized
- add one more book to array
- download all three images (rename)
- setup images folder in the src
- import all three images in the books.js
- set image property equal to import
- and yes each image requires new import

```js

import img1 from './images/book1.jpg';
import img2 from './images/book2.jpg';

